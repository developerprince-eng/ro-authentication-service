# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
env:
  MONGOURI: mongodb+srv://retrospecs:XLteY3GscHnLyFvU@cluster0.3uaovad.mongodb.net/?retryWrites=true&w=majority
  PG_DB_PASSWORD: Mabri2019#007
  PG_DB_URL: db.wnppqypousbcqipwutah.supabase.co/postgres
  PG_DB_USER: postgres
  PRIVATE_KEY: qwertyazerty1234
  TOKEN_LIFE: 86400

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml -Dspring.profiles.active=test

  push:
    needs: build
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build with Maven
        run: mvn -B package --file pom.xml -Dspring.profiles.active=staging
      -
        name: Login to private registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: '${{ secrets.REGISTRY}}/${{ secrets.REGISTRY_USERNAME}}/${{secrets.DOCKER_IMAGE}}:latest'

  deploy:
    needs: push
    runs-on: ubuntu-latest
    steps:
      - name: deploy remotely
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            [ -d "/var/github" ] && echo "Directory /var/github exists." || mkdir /var/github && echo "Directory /var/github is now created."
            [ -d "/var/github/${{secrets.REPO_NAME}}" ] && echo "Directory /var/github/${{secrets.REPO_NAME}} exists." || cd /var/github && git clone ${{secrets.REPO_URL}}
            [ -d "/var/github/${{secrets.REPO_NAME}}" ] && echo "Directory /var/github/${{secrets.REPO_NAME}} exists." || docker login ${{ secrets.REGISTRY_URL }} --username ${{ secrets.REGISTRY_USERNAME }} --password ${{ secrets.REGISTRY_PASSWORD }}
            [ -d "/var/github/${{secrets.REPO_NAME}}" ] && cd /var/github/${{secrets.REPO_NAME}} && git pull origin master | echo "Pulling Repoitory" && echo "Done Pulling" || echo "Directory does not exist"
            cd /var/github/${{secrets.REPO_NAME}} && kubectl apply -f deploy.yaml

  post:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: send telegram message on push
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ${{ github.actor }} created commit:
            Commit message: ${{ github.event.commits[0].message }}
            Repository: ${{ github.repository }}
            See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
